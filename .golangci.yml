# Options for analysis running.
run:
  # The default concurrency value is the number of available CPU.
  concurrency: 4
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 2m
  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 1
  # Include test files or not.
  # Default: true
  tests: false
  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  skip-dirs-use-default: true
  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-files:
  - ".*\\.bad\\.go$"
  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false
  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.18
  go: '1.17'
# output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.json,colored-line-number"
  #
  # Default: colored-line-number
  # Print lines of code with issue.
  # Default: true
  # Print linter name in the end of issue text.
  # Default: true
  # Make issues output unique by line.
  # Default: true
#  uniq-by-line: false
  # Add a prefix to the output file references.
  # Default is no prefix.
  path-prefix: ""
  # Sort results by: filepath, line and column.
#  sort-results: false
linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  enable:
#      Enabled by Default
    - deadcode
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - typecheck
    - unused
    - varcheck
#      Disabled by Default
#      Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
#    - revive
    - golint
#      checks whether HTTP response body is closed successfully
    - bodyclose
#      Provides diagnostics that check for bugs, performance and style issues.
#      Extensible without recompilation through dynamic rules.
#      Dynamic rules are written declaratively with AST patterns, filters, report message and optional suggestion.
    - gocritic
#      Reports long lines
    - lll
#      Whitespace Linter - Forces you to use empty lines!
    - wsl
#      Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - gofmt
#      Reports unused function parameters
    - unparam
#      In addition to fixing imports, goimports also formats your code in the same style as gofmt.
    - goimports
#      Finds repeated strings that could be replaced by a constant
    - goconst
#      Tool for detection of long functions
    - funlen
#      checks for pointers to enclosing loop variables
    - exportloopref
# Configuration
linters-settings:
  gosimple:
    # Select the Go version to target.
    # Default: 1.13
    # Deprecated: use the global `run.go` instead.
    go: "1.15"
    # https://staticcheck.io/docs/options#checks
    # Default: ["*"]
    checks: ["all"]
  govet:
    # Report about shadowed variables.
    # Default: false
    check-shadowing: true
  staticcheck:
    # https://staticcheck.io/docs/options#checks
    # Default: ["*"]
    checks: ["all"]
  varcheck:
    # Check usage of exported fields and variables.
    # Default: false
    exported-fields: true
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'.
    # See https://go-critic.github.io/overview#checks-overview.
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`.
    # By default, list of stable checks is used.
    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings:
      # Must be valid enabled check name.
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: false
      elseif:
        # Whether to skip balanced if-else pairs.
        # Default: true
        skipBalanced: false
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: false
  gofmt:
    # Simplify code: gofmt with `-s` option.
    # Default: true
    simplify: false
  unparam:
    # Inspect exported functions.
    #
    # Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    #
    # Default: false
    check-exported: true
  goimports:
    # Put imports beginning with prefix after 3rd-party packages.
    # It's a comma-separated list of prefixes.
    # Default: ""
    local-prefixes: github.com/org/project
  goconst:
    # Ignore test files.
    # Default: false
    ignore-tests: true
    # Search also for duplicated numbers.
    # Default: false
    numbers: true
  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 100
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: 50
